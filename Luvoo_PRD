# ðŸ“± Luvoo â€“ Flutter + Firebase MVP PRD

**Platform:** Flutter (mobile)  
**Backend:** Firebase (Auth, Firestore, Storage)  
**Author:** Fred  
**Date:** June 2025

---

## 1. Objective

Luvoo is a dating app focused on meaningful connections. This MVP will implement user auth, profile setup, feed-based discovery, match system, and chat. Development will be assisted using Cursor.

---

## 2. MVP Scope

### Must-Have Features
- Firebase email/password signup/login
- Profile setup: photo, name, age, bio, gender
- Discovery feed (no swipe, scrollable list)
- Like/comment on profile elements
- Auto match creation when like is mutual
- 1-on-1 chat between matched users
- Simple admin view (web or Firebase console)

---

## 3. Tech Stack

### Frontend
- Flutter (Dart)
- Riverpod or Bloc (state management)
- GoRouter (routing)
- Firebase packages: `firebase_auth`, `cloud_firestore`, `firebase_storage`

### Backend
- Firebase Auth
- Firestore (NoSQL DB)
- Firebase Storage (images)
- Firebase Functions (optional)

---

## 4. Firestore Data Model

### `users/{uid}`
```json
{
  "id": "uid",
  "email": "test@luvoo.app",
  "name": "Alice",
  "bio": "Love hiking",
  "gender": "female",
  "birthday": "1997-04-23",
  "photoUrl": "...",
  "createdAt": Timestamp
}
```

### `prompts/{promptId}`
```json
{
  "userId": "uid",
  "text": "Whatâ€™s your idea of a perfect date?",
  "answer": "Taco truck + stargazing"
}
```

### `likes/{uid}/liked/{targetId}`
```json
{
  "fromUserId": "uid",
  "toUserId": "targetId",
  "comment": "Nice smile!",
  "timestamp": Timestamp
}
```

### `matches/{matchId}`
```json
{
  "userA": "uid",
  "userB": "targetId",
  "createdAt": Timestamp
}
```

### `messages/{matchId}/messages/{messageId}`
```json
{
  "senderId": "uid",
  "text": "Hey!",
  "timestamp": Timestamp
}
```

---

## 5. Screens (Flutter)

- `SplashScreen`: Auto login or redirect
- `LoginScreen`: Email/password login
- `RegisterScreen`: Sign-up with basic info
- `ProfileSetupScreen`: Upload image, fill bio, birthday, gender
- `DiscoveryFeedScreen`: Scrollable list of other users
- `ProfileDetailScreen`: Like + optional comment
- `ChatListScreen`: Show matched users
- `ChatScreen`: Show conversation
- `AdminDashboard`: (Optional for Firebase Console)

---

## 6. Match Flow

1. User A likes User B (saved under `likes`)
2. System checks if User B already liked User A
3. If yes, create `matches/{matchId}` and open chat
4. Notify both users (local snackbar or in-app toast)

---

## 7. Success Metrics

- >70% profile completion
- 1+ match per user per day
- 5+ min avg session length
- 90% crash-free sessions

---

## 8. Folder Structure (Cursor / Flutter)

```
lib/
â”œâ”€â”€ core/
â”‚   â”œâ”€â”€ constants/
â”‚   â”œâ”€â”€ services/         # firebase_service.dart, auth_service.dart
â”‚   â””â”€â”€ widgets/          # reusable buttons, cards
â”œâ”€â”€ features/
â”‚   â”œâ”€â”€ auth/             # login, register
â”‚   â”œâ”€â”€ profile/          # setup, view
â”‚   â”œâ”€â”€ discovery/        # feed, like
â”‚   â”œâ”€â”€ chat/             # chat UI
â”‚   â””â”€â”€ admin/            # optional
â”œâ”€â”€ models/               # user_model.dart, message_model.dart
â”œâ”€â”€ routes/               # app_router.dart
â””â”€â”€ main.dart
```

---

## 9. Cursor Notes

- Place Firebase logic in `core/services/`
- Use modular `features/*/screens` and `features/*/logic`
- Scaffold with dummy `UserModel` and `FirestoreService`
- Ask Cursor to write Firestore `query()`s and `set()`s based on model

---

## 10. Deliverables

- Flutter project (modular folder structure)
- Firebase project connected (Auth, Firestore, Storage)
- Testable MVP APK (Android) or iOS build (TestFlight)
