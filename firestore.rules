rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Test collection (for development only)
    match /test_users/{document=**} {
      allow read, write: if true;
    }

    // User profiles (temporarily allowing all operations for testing)
    match /users/{userId} {
      allow read, write: if true;
    }

    // Likes
    match /likes/{likeId} {
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      allow read: if request.auth != null && resource.data.fromUserId == request.auth.uid;
      allow update, delete: if false;
    }

    // User Actions (likes and dislikes)
    match /user_actions/{actionId} {
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      allow read: if request.auth != null && resource.data.fromUserId == request.auth.uid;
      allow update, delete: if false;
    }

    // Matches
    match /matches/{matchId} {
      allow create: if request.auth != null && 
        (request.resource.data.userA == request.auth.uid || 
         request.resource.data.userB == request.auth.uid);
      allow read: if request.auth != null && 
        (resource.data.userA == request.auth.uid || 
         resource.data.userB == request.auth.uid);
      allow update, delete: if false;
    }

    // Dislikes
    match /dislikes/{dislikeId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // Super Likes
    match /super_likes/{superLikeId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    // Chats
    match /chats/{chatId} {
      allow read: if request.auth != null && resource.data.users is list && request.auth.uid in resource.data.users;
      allow create: if request.auth != null && request.resource.data.users is list && request.auth.uid in request.resource.data.users;
      allow update: if request.auth != null && resource.data.users is list && request.auth.uid in resource.data.users;
      allow delete: if false;
    }

    // Chat Messages
    match /chats/{chatId}/messages/{messageId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.users is list && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      allow create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.users is list && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users && request.resource.data.senderId == request.auth.uid;
      allow update: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.users is list && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users && resource.data.senderId == request.auth.uid;
      allow delete: if false;
    }
  }
} 